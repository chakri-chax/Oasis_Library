{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.GoogleBooksAPI = void 0;\nclass GoogleBooksAPI {\n  BASE_URL = \"https://www.googleapis.com/books/v1/volumes\";\n  async search(params) {\n    const response = await fetch(`${this.BASE_URL}?q=${this.formatSearchFiltersToQueryString(params.filters)}`);\n    return await response.json();\n  }\n  formatSearchFiltersToQueryString(filters) {\n    const mappedFields = {\n      title: \"intitle\",\n      author: \"inauthor\",\n      publisher: \"inpublisher\",\n      subject: \"subject\",\n      isbn: \"isbn\"\n    };\n    return Object.keys(filters).filter(param => filters[param]).map(param => `${mappedFields[param]}:${filters[param]}`).join(\"&\");\n  }\n  async getVolume(volumeId) {\n    const response = await fetch(`${this.BASE_URL}/${volumeId}`);\n    const data = await response.json();\n    if (data.error) {\n      throw Error(\"Volume not found\");\n    }\n    return data;\n  }\n}\nexports.GoogleBooksAPI = GoogleBooksAPI;","map":{"version":3,"names":["GoogleBooksAPI","BASE_URL","search","params","response","fetch","formatSearchFiltersToQueryString","filters","json","mappedFields","title","author","publisher","subject","isbn","Object","keys","filter","param","map","join","getVolume","volumeId","data","error","Error","exports"],"sources":["/Users/manlymsv/Downloads/0xN4RM4D4/Oasis/Oasis_Library/node_modules/google-books-js/dist/src/api.ts"],"sourcesContent":["import { GetVolumeError } from \"./interfaces/errors\";\nimport { SearchParams, SearchResult } from \"./interfaces/search\";\nimport { Volume } from \"./types/volume\";\n\nexport class GoogleBooksAPI {\n  private BASE_URL = \"https://www.googleapis.com/books/v1/volumes\";\n\n  public async search(params: SearchParams): Promise<SearchResult> {\n    const response = await fetch(\n      `${this.BASE_URL}?q=${this.formatSearchFiltersToQueryString(\n        params.filters\n      )}`\n    );\n\n    return (await response.json()) as SearchResult;\n  }\n\n  private formatSearchFiltersToQueryString(\n    filters: SearchParams[\"filters\"]\n  ): string {\n    const mappedFields: { [key: string]: string } = {\n      title: \"intitle\",\n      author: \"inauthor\",\n      publisher: \"inpublisher\",\n      subject: \"subject\",\n      isbn: \"isbn\",\n    };\n    return Object.keys(filters)\n      .filter((param) => filters[param as keyof SearchParams[\"filters\"]])\n      .map(\n        (param) =>\n          `${mappedFields[param]}:${\n            filters[param as keyof SearchParams[\"filters\"]] as string\n          }`\n      )\n      .join(\"&\");\n  }\n\n  public async getVolume(volumeId: string): Promise<Volume> {\n    const response = await fetch(`${this.BASE_URL}/${volumeId}`);\n    const data = (await response.json()) as Volume | GetVolumeError;\n\n    if ((data as GetVolumeError).error) {\n      throw Error(\"Volume not found\");\n    }\n    return data as Volume;\n  }\n}\n"],"mappings":";;;;;;AAIA,MAAaA,cAAc;EACjBC,QAAQ,GAAG,6CAA6C;EAEzD,MAAMC,MAAMA,CAACC,MAAoB;IACtC,MAAMC,QAAQ,GAAG,MAAMC,KAAK,CAC1B,GAAG,IAAI,CAACJ,QAAQ,MAAM,IAAI,CAACK,gCAAgC,CACzDH,MAAM,CAACI,OAAO,CACf,EAAE,CACJ;IAED,OAAQ,MAAMH,QAAQ,CAACI,IAAI,EAAE;EAC/B;EAEQF,gCAAgCA,CACtCC,OAAgC;IAEhC,MAAME,YAAY,GAA8B;MAC9CC,KAAK,EAAE,SAAS;MAChBC,MAAM,EAAE,UAAU;MAClBC,SAAS,EAAE,aAAa;MACxBC,OAAO,EAAE,SAAS;MAClBC,IAAI,EAAE;KACP;IACD,OAAOC,MAAM,CAACC,IAAI,CAACT,OAAO,CAAC,CACxBU,MAAM,CAAEC,KAAK,IAAKX,OAAO,CAACW,KAAsC,CAAC,CAAC,CAClEC,GAAG,CACDD,KAAK,IACJ,GAAGT,YAAY,CAACS,KAAK,CAAC,IACpBX,OAAO,CAACW,KAAsC,CAChD,EAAE,CACL,CACAE,IAAI,CAAC,GAAG,CAAC;EACd;EAEO,MAAMC,SAASA,CAACC,QAAgB;IACrC,MAAMlB,QAAQ,GAAG,MAAMC,KAAK,CAAC,GAAG,IAAI,CAACJ,QAAQ,IAAIqB,QAAQ,EAAE,CAAC;IAC5D,MAAMC,IAAI,GAAI,MAAMnB,QAAQ,CAACI,IAAI,EAA8B;IAE/D,IAAKe,IAAuB,CAACC,KAAK,EAAE;MAClC,MAAMC,KAAK,CAAC,kBAAkB,CAAC;;IAEjC,OAAOF,IAAc;EACvB;;AA1CFG,OAAA,CAAA1B,cAAA,GAAAA,cAAA"},"metadata":{},"sourceType":"script","externalDependencies":[]}